// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./userDataClient"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("USER_DATABASE_URL")
}

model User {
  user_id     Int    @id @default(autoincrement()) @map("user_id")
  name        String @map("name")
  sign_up_id  String @unique @map("sign_up_id")
  password    String @map("password")
  
  character   Character[]

  @@map("user")
}

model Character {
  character_id  Int     @id @default(autoincrement()) @map("character_id")
  name          String  @unique @map("name")
  User_id       Int     @map("user_id")
  health        Int     @default(500) @map("health")
  power         Int     @default(100) @map("power")
  money         Int     @default(10000) @map("money")

  inventory     Inventory[]
  equipment     Equipment[]

  user      User    @relation(fields: [User_id], references: [user_id], onDelete: Cascade)
  
  @@map("character_db")
}

model Inventory {
  inven_id        Int   @id @default(autoincrement())  @map("inven_id")
  item_id         Int   @map("item_id")
  Character_id    Int   @map("character_id")
  count           Int   @map("count")

  character       Character    @relation(fields: [Character_id], references: [character_id], onDelete:Cascade)

  @@map("inventory")
}

model Equipment {
  equip_id        Int   @id @default(autoincrement()) @map("equip_id")
  item_id         Int   @map("item_id")
  Character_id    Int   @map("character_id")

  character      Character    @relation(fields: [Character_id], references: [character_id], onDelete:Cascade)

  @@map("equipment")
}